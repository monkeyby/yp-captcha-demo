/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.47
 * Generated at: 2019-01-03 07:59:14 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"zh-CN\">\n");
      out.write("<head>\n");
      out.write("  <meta charset=\"UTF-8\">\n");
      out.write("  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0\">\n");
      out.write("  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n");
      out.write("  <meta name=\"referrer\" content=\"no-referrer\">\n");
      out.write("  <title>验证码示例-dialog模式</title>\n");
      out.write("  <link href='//cdn.bootcss.com/bootstrap/3.3.6/css/bootstrap.css' rel='stylesheet'>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("<form style=\"max-width: 320px; margin: 120px auto;\">\n");
      out.write("    <h2 class=\"form-signin-heading\">云片验证码</h2>\n");
      out.write("    <input type=\"text\" class=\"form-control\" name=\"username\" placeholder=\"账号\" />\n");
      out.write("    <input type=\"password\" class=\"form-control\" name=\"password\" placeholder=\"密码\" />\n");
      out.write("    <div id=\"cbox\"></div>\n");
      out.write("    <button class=\"btn btn-lg btn-primary btn-block\" type=\"submit\" id=\"submit-btn\">登录</button>\n");
      out.write("</form>\n");
      out.write("<script src=\"https://www.yunpian.com/static/official/js/libs/riddler-sdk-0.2.1.js\"></script>\n");
      out.write("<script src=\"http://code.jquery.com/jquery-2.1.4.min.js\"></script>\n");
      out.write("<script>\n");
      out.write("    window.onload = function () {\n");
      out.write("    reqdata = {token:\"\",authenticate:\"\"}\n");
      out.write("      // 初始化\n");
      out.write("      new YpRiddler({\n");
      out.write("        expired: 10,\n");
      out.write("        mode: 'dialog',\n");
      out.write("        container: document.getElementById('cbox'),\n");
      out.write("        appId: '6a964d3946584546b46f7bf83a775904',\n");
      out.write("        version: 'v1',\n");
      out.write("        onError: function (param) {\n");
      out.write("          if(param.code == 429) {\n");
      out.write("            alert('请求过于频繁，请稍后再试！')\n");
      out.write("            return\n");
      out.write("          }\n");
      out.write("          // 异常回调\n");
      out.write("          console.error('验证服务异常')\n");
      out.write("        },\n");
      out.write("        onSuccess: function (validInfo, close) {\n");
      out.write("          // 成功回调\n");
      out.write("          console.log(`验证通过！token=${validInfo.token}, authenticate=${validInfo.authenticate}`)\n");
      out.write("          reqdata.token = validInfo.token;\n");
      out.write("          reqdata.authenticate = validInfo.authenticate;\n");
      out.write("\n");
      out.write("        close()\n");
      out.write("        },\n");
      out.write("        onFail: function (code, msg, retry) {\n");
      out.write("          // 失败回调\n");
      out.write("          alert('出错啦：' + msg + ' code: ' + code) \n");
      out.write("          retry()\n");
      out.write("        },\n");
      out.write("        beforeStart: function (next) {\n");
      out.write("         console.log('验证马上开始')\n");
      out.write("         next()\n");
      out.write("        },\n");
      out.write("        onExit: function() {\n");
      out.write("          // 退出验证 （仅限dialog模式有效）\n");
      out.write("          console.log('退出验证')\n");
      out.write("        }\n");
      out.write("      })\n");
      out.write("    }\n");
      out.write("  // 监听button的点击事件，进行验证\n");
      out.write("  document.getElementById('submit-btn').addEventListener('click', function (event) {\n");
      out.write("        if(reqdata.token == \"\" || reqdata.authenticate == \"\"){\n");
      out.write("          alert('请先通过验证码!')\n");
      out.write("          return ;\n");
      out.write("        }\n");
      out.write("        event.preventDefault();\n");
      out.write("        var data = {\n");
      out.write("          username: $('#username').val(),\n");
      out.write("          password: $('#password').val(),\n");
      out.write("          token:reqdata.token,\n");
      out.write("          authenticate:reqdata.authenticate,\n");
      out.write("        }\n");
      out.write("        console.log('data',data)\n");
      out.write("        $.ajax({      \n");
      out.write("        url: '/login',      \n");
      out.write("        datatype: \"json\",\n");
      out.write("        data: data,\n");
      out.write("        type: 'post',      \n");
      out.write("        success: function (data) {      \n");
      out.write("        //成功后回调      \n");
      out.write("            console.log(\"回调函数成功了\");\n");
      out.write("            window.location.href=\"/success.jsp\";       \n");
      out.write("         },      \n");
      out.write("        error: function(e){      \n");
      out.write("        //失败后回调      \n");
      out.write("            console.log(\"服务器请求失败\");\n");
      out.write("            window.location.href=\"/fail.jsp\";       \n");
      out.write("        },      \n");
      out.write("        beforeSend: function(){      \n");
      out.write("        //发送请求前调用，可以放一些\"正在加载\"之类额话      \n");
      out.write("            // console.log(\"正在加载\");           \n");
      out.write("        }}) \n");
      out.write("  });\n");
      out.write("</script>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
